#version 400 core


in vec2 position;
in vec4 indicators;

uniform float time;

out vec4 clipSpace;
out vec4 pass_clipSpaceGrid;
out vec3 toCameraVector;
out vec3 fromLightVector;
out vec3 pass_normal;
out vec3 toLightVector;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;
uniform vec3 cameraPosition;
uniform vec3 lightPosition;

const float PI = 3.1415926535897932384626433832795;
const float waveAmplitude = 0.02;
const float waveLength = 0.01;


vec3 calcNormal(vec3 vertex0, vec3 vertex1, vec3 vertex2){
	vec3 tangent = vertex1 - vertex0;
	vec3 bitangent = vertex2 - vertex0;
	return normalize(cross(tangent, bitangent));
}

float generateOffset(float x, float z, float val1, float val2){
	float radiansX = ((mod(x+z*x*val1, waveLength)/waveLength) + 10.0*time * mod(x * 0.8 + z, 1.5)) * 2.0 * PI;
	float radiansZ = ((mod(val2 * (z*x +x*z), waveLength)/waveLength) + 10.0*time * 2.0 * mod(x , 2.0) ) * 2.0 * PI;
	return waveAmplitude * 0.5 * (sin(radiansZ) + cos(radiansX));
}

vec3 applyDistortion(vec3 vertex){
	float xDistortion = generateOffset(vertex.x, vertex.z, 0.02, 0.1);
	float yDistortion = generateOffset(vertex.x, vertex.z, 0.1, 0.3);
	float zDistortion = generateOffset(vertex.x, vertex.z, 0.15, 0.2);
	return vertex + vec3(xDistortion, yDistortion, zDistortion);
}

void main(void) {
    float height = 0.0;

    vec3 currentVertex = vec3(position.x, height, position.y);
    vec3 vertex1 = currentVertex + vec3(indicators.x, 0.0, indicators.y);
    vec3 vertex2 = currentVertex + vec3(indicators.z, 0.0, indicators.w);

    //added
    pass_clipSpaceGrid = projectionMatrix * viewMatrix * modelMatrix * vec4(currentVertex, 1.0);

    currentVertex = applyDistortion(currentVertex);
    vertex1 = applyDistortion(vertex1);
    vertex2 = applyDistortion(vertex2);

    pass_normal = calcNormal(currentVertex, vertex1, vertex2);

    vec4 worldPosition = modelMatrix * vec4(currentVertex, 1.0);

    clipSpace = projectionMatrix * viewMatrix * worldPosition;
	gl_Position = clipSpace;

	toCameraVector = cameraPosition - worldPosition.xyz;
	fromLightVector = worldPosition.xyz - lightPosition;

    toLightVector = lightPosition - worldPosition.xyz;
}