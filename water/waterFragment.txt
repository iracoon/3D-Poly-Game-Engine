#version 400 core

in vec4 clipSpace;
in vec4 pass_clipSpaceGrid;
in vec3 toCameraVector;
in vec3 fromLightVector;
in vec3 pass_normal;
in vec3 toLightVector;

out vec4 out_Color;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D depthMap;
uniform vec3 lightColour;

const float shineDamper = 20.0;
const float reflectivity = 0.6;
const float edgeSoftness = 5.0;
const float minBlueness = 0.4;
const float maxBlueness = 0.8;
const float murkyDepth = 14;
const vec4 waterColour = vec4(0.604, 0.867, 0.851, 1.0);

vec4 applyMurkiness(vec4 refractColour, float waterDepth){
	float murkyFactor = clamp(waterDepth / murkyDepth, 0.0, 1.0);
	float murkiness = minBlueness + murkyFactor * (maxBlueness - minBlueness);
	return mix(refractColour, waterColour, murkiness);
}

float toLinearDepth(float zDepth){
    float near = 0.1;
	float far = 1000.0;
	return 2.0 * near * far / (far + near - (2.0 * zDepth - 1.0) * (far - near));
}

float calculateWaterDepth(vec2 texCoords){
	float depth = texture(depthMap, texCoords).r;
	float floorDistance = toLinearDepth(depth);
	depth = gl_FragCoord.z;
	float waterDistance = toLinearDepth(depth);
	return floorDistance - waterDistance;
}


void main(void) {

    vec2 ndc = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
    vec2 ndc2 = (pass_clipSpaceGrid.xy/pass_clipSpaceGrid.w)/2.0 + 0.5;

	vec2 refractTexCoords = ndc2;
    vec2 reflectTexCoords = vec2(ndc2.x, 1.0 - ndc2.y);
    float waterDepth = calculateWaterDepth(ndc);

	vec4 reflectColour = texture(reflectionTexture, reflectTexCoords);
	vec4 refractColour = texture(refractionTexture, refractTexCoords);

	//add blueness
	refractColour = applyMurkiness(refractColour, waterDepth);
    reflectColour = mix(reflectColour, waterColour, minBlueness);
    ////////

    vec3 viewVector = normalize(toCameraVector);

    float refractiveFactor = dot(viewVector, pass_normal);
    refractiveFactor = pow(refractiveFactor, 0.5);

    vec3 reflectedLight = reflect(normalize(fromLightVector), pass_normal);
    float specular = max(dot(reflectedLight, viewVector), 0.0);
    specular = max(specular,0.0);
    specular = pow(specular, shineDamper);
    vec3 specularHighlights = lightColour * specular * reflectivity;


    vec3 totalDiffuse = vec3(0.0);

    vec3 unitLightVector = normalize(toLightVector);
    float nDotl = dot(pass_normal,unitLightVector);
    float brightness = max(nDotl,0.0);

    totalDiffuse = totalDiffuse + (brightness * lightColour);
    totalDiffuse = max(totalDiffuse, 0.2);

	out_Color = mix(reflectColour, refractColour, refractiveFactor) ;
	out_Color = mix(out_Color, vec4(0.604, 0.867, 0.851, 1.0) , 0.45) * vec4(totalDiffuse,1.0) + vec4(specularHighlights, 0.0);

	out_Color.a = clamp(waterDepth / edgeSoftness, 0.0, 1.0);
}